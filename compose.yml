services:
  # Database
  database:
    container_name: database-container
    image: postgres
    env_file: "./.env.development"
    ports:
      # Export port for my computer to connect to the database
      - "5430:5432"
    # Healthcheck to ensure the database is ready to accept connections
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Development server
  dev-server:
    container_name: dev-server-container
    build:
      context: ./server
      dockerfile: dev.Dockerfile
    env_file: "./.env.development"
    depends_on:
      database:
        # Wait for the database to be ready before starting the server
        condition: service_healthy
    ports:
      # port 3000 on host machine is mapped to port 3000 on container
      - "3000:3000" 
    # When pc restarts it will start the server again, until I stop it with docker stop
    # restart: unless-stopped
    volumes:
      - ./server:/app
      - /app/prisma # perserve docker generated
      - /app/generated # perserve docker generated
      - /app/node_modules # This is perserved and not overwritten by command above
    # Reset whole database and Run initial prisma migration to create the database and start the server
    command: sh -c "npx prisma migrate reset --force && npx prisma migrate dev --name init && pnpm run dev"

  # Production server
  server:
      container_name: server-container
      build:
        context: ./server
        dockerfile: Dockerfile
      # Define project env variables
      env_file: "./.env.production"
      # Uses container env variables, defined with --env-file when runing docker compose
      ports:
        - "8080:8080"